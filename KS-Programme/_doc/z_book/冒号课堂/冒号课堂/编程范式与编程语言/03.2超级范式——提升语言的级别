3.2超级范式——提升语言的级别
元编程作为超级范式的一个体现是，它能提升语言的级别。
如果说OOP的关键在于构造对象的概念，那么LOP的关键在于构造语言的语法。
元程序将程序作为数据来对待，能自我发现、自我赋权和自我升级，有着其他程序所不具备的自觉性、自适应性和智能性，可以说是一种最高级的程序。

模板元编程（Template Metaprogramming），与泛型编程密切相关但是自成一派，隶属于另一种编程范式——元编程（MP，Metaprogramming）。

元编程作为超级范式的一个体现是，它能体现语言的级别。
比如，有了编译器的存在，汇编语言升级为第3代高级语言；同样借助Yacc、ANTLR之类的元编程工具，第3代语言升级为第4代DSL语言。

将这一模式发挥至极致，便是更加激进的语言导向式编程（LOP，Language-Oriented Programming）。
这种编程范式的思路是：在建立一套DSL体系之后，直接用它们来编写软件，尽量不用通用语言。

区别：
 		      问题 	——>		 解决办法 ——>		通用语言源程序	——>	可执行程序
通用语言编程  形成概念模型	将解法映射到通用语言 编译器编译
			  问题	——>		 解决办法 ——>		专用语言源程序 ——> 通用语言源程序——>可执行程序
专用语言编程  形成概念模型将 解法映射到专用语言	 元编程            编译器
由于DSL比通用语言更简单、更抽象、更专业、更接近自然语言和声明式语言，开发效率显著提高。

LOP的关键在于构造语言的语法。

有时程序的结构需要动态改变，而C++、Java、C#等静态语言是不允许动态变更类的成员或实现代码的，利用元编程可以突破这种限制。
自动生成源代码的编程也属于另一种编程范式——生产式编程（Generative Programming）的范畴。
区别在于后者更看重代码的生成，而元编程看重的是代码的可执行性。
另外，除了编译期间生成源代码的静态元编程，还有能再运行期间修改程序的动态元编程。
从低级的汇编到一些高级的动态语言，如perl、python、ruby等均支持该功能。
比如许多脚本语言都提供eval函数。

在传统的编程中，运算是动态的，但程序本身是静态的。
在元编程中，二者都是动态的。
元编程将程序作为数据来对待，能自我发现、自我赋权和自我升级，有着其他程序所不具备的自觉性、自适应性和智能性，可以说是一种最高级的编程。
