3.1泛型范式（GP，Generic Programming）——抽象你的算法
算法串联数据，如脊贯肉；数据实化算法，如肉附脊。
泛型编程是算法导向的，即以算法为起点和中心点的，逐渐将其所涉及的概念内涵模糊化、外延扩大化，将其所涉及的运算抽象化、一般化，从而扩展算法的适用范围。

基本思想：将算法和其作用的数据结构分离，并将后者尽可能泛化，最大限度实现算法重用。
这种泛化是基于模板的参数多态（parameteric polymorphism），相比OOp基于继承（inheritance）的子类型多态（subtyping polymorphism），不仅普适性更强，而且效率也更高。

GP最著名的代表是C++中的STL（Standard Template Library），其后亦为Java，C#等吸纳。
此外，一些函数式语言Haskell、Ocaml等也支持GP。

STL有三个要素：算法（algorithm）、容器（container）和迭代器（iterator）。
算法是一些列切实有效的步骤；容器是数据的集合，可理解为抽象的数组；迭代器是算法和容器之间的接口，可以理解为抽象的指针或游标。
通过模板，泛化了容器——可以是数组、列表、集合、映射、队列、栈、字符串等等；
泛化了元素——可以是任何数据类型；
泛化了处理方法和限定条件——可以是任何函数，还可以是函子（functor）——自带状态的函数对象。
泛化了迭代器——可以从前往后移动，也可以从后往前移动，可以来回移动，可以随机移动，可以按任意预先
定义的规律移动。

泛型使代码简洁，摆脱底层编码的细节，在更高、更抽象的层次上进行编程设计。
泛型编程不光能泛化概念，还能泛化行为。