上篇：编程范式与编程语言
1.开班导言
1.1 开班发言——程序员的4层境界
学会不如会学，会学不如会用，会用不如被用。
如果知识是水，我们要挖掘最先涌动的泉眼。
如果知识是火，我们要捕捉起初点燃的火花。
如果知识是树，其树大根深，不究立固之本则无以知过去；其枝繁叶茂，不握支撑之干则无以知当下；其蓬勃旺盛，不察生长之点则无以知将来。
越是喧嚣的世界，越需要宁静的思考，让躁动的心灵得以平息，让蕴藏的灵性得以释放。
知识之上是思想，思想之上是精神。

1.2 首轮提问——什么语言最好？
Turing-complete 一个能计算出每个图灵可计算函数的计算系统被称为图灵完备的。一个语言是图灵完备的，意味着该语言的计算能力与一个通用图灵机相当，这也是现代计算机语言所能拥有的最高能力。

1.3 语言选择——合适的就是最好的
好的语言就是适合编程者和解决对象的语言。
机器语言、汇编语言、高级语言、面向问题语言、人工智能语言。（计算机语言发展历程）

1.4 初始范式——程序王国中的世界观和方法论
编程心法：编程范式（paradigm）是计算机编程的基本风格或典范模式。
如果说每个编程者都在创造虚拟世界，那么编程范式就是他们置身其中自觉不自觉采用的世界观和方法论。
编程范式是抽象的，必须通过具体的编程语言来体现。它代表的世界观往往体现在语言的核心概念中，代表的方法论往往体现在语言的表达机制中。
一种范式可以在不同的语言中实现，一种语言也可以支持多种范式。
任何语言在设计时都会倾向于某些范式，同时回避某些范式，由此形成了不同的原发特征和语言风格。


1.5 开发技术——实用还是时髦？
框架 可以是协同工作的类，也可以是协同工作的函数。
一个足够复杂的应用软件开发，为确保快速有效，通常采取的方式是：
在宏观上选取一些框架以控制整体的结构和流程；
在微观实现上利用库和工具包来解决具体的细节问题。
框架的意义在于使设计者在特定领域的整体设计上不必重新发明轮子；库和工具包的意义在于使开发者摆脱底层编码，专注于特定问题和业务逻辑。


库和工具包是为程序员带来自由，框架是为程序员带来约束的。
具体地说，库和工具包提供武器装备，框架则利用控制反转（IoC）机制实现对各模块的统一调度，宠儿剥夺了程序员对全局的掌控权，使他们成为手执编程武器、随时听候调遣的士兵。

IoC ： （Inversion of Control） 控制反转
是一种软件设计原则。与通常的用户代码调用可重用的库代码不同，IoC倒转了控制流的方向：由库代码调用用户代码。
有人将此比作好莱坞法则：“不要打电话给我们，我们会打给你的。”

设计模式和架构不是软件产品，而且软件思想。设计模式是软件的战术思想，架构是软件的战略决策。
设计模式是针对某些经常出现的问题提出的行之有效的设计解决方案，而它侧重思想重用，因此比框架更更抽象、更普适，但多限于局部解决方案，没有框架的整体性。
与之相似的还有惯用法（idiom），也是针对常发问题的解决方案，侧重实现而非设计，与实现语言密切相关，是一种更底层更具体的编程技巧。
至于架构，一般指一个软件系统的最高层次的整体结构和规划，一个架构可能包含多个框架，而一个框架可能包含多个设计模式。