3.3 切面范式——多角度看问题
Soc : Separation of Concerns, 即关注点分离；
DRY ：Don't Repeat Yourself, 即尽量减少重复代码。

不良代码通常有两种病症：
一是 结构混乱，或聚至纠缠打结、或散至七零八落；
二是 代码重复，叠床架屋、臃肿不堪。

解决这些问题的一个有效方法是 抽象与分解：
从问题中抽象出一些关注点，再以此为基础进行分解。
分解后的子问题主题鲜明且独立完备，即不会牵一发动全身，也不会四分五裂、支离破碎。
同时具有相同特征的部分可以像代数中的公因子一样提取出来，提高了重用性，减少了重复性。

抽象是前提，分解是方式，模块化是结果。
抽象与分解的原则： 单一化 正交化
每个模块职责明确专一，模块之间相互独立，即高内聚低耦合（high cohesion & low coupling）。
此原则相当普适，是分析复杂事物的一种基本方法，在数学和物理中应用得尤其广泛，
如质因式分解、正交分解、谱分解，等等。
（在数据中互为正交的两个向量在彼此方向上投影为零，意味着彼此独立、互不影响）

A（Aspect）OP以切面为模块，它描述的是横切关注点（cross-cutting concerns），即与程序的纵向主流执行方向横向正交的关注焦点。

不妨回顾下，无论是过程式的函数，还是对象式的方法，都包含了完成的执行代码。
但有些代码横跨了多个模块，以片段的形式散落在各处，虽具有相似的逻辑，却无法用传统的方法提炼成模块，难以实现SoC和DRY。
典型的例子如：在调用某些对象的方法，读写某些对象的域、抛出某些异常等前后需要用到统一的业务逻辑，诸如日志输出、代码跟踪、性能监控、异常处理、安全检查、事务管理，等等。
为了解决此类问题，AOP应运而生。

它将每类横切关注封装到单独的Aspect 模块中，将程序中的一些执行点和相应的代码绑定起来。
单个的执行点称为接入点（join point）。
例如，调用某个对象的方法前后；符合预先指定条件的接入点集合称为切入点（pointcut）。
再如，所有一set为命名开头的方法；每段绑定的代码称为一个建议（advice）。

接入处是点，切入处是面，面有点组成。
advice定义于切入点上，执行于接入点处。
换言之，共享一段附加代码的接入点组成了一个切入点。切入点一般用条件表达式来描述，不仅有广泛性，还有预见性——以后新增的代码如果含满足切入点条件的接入点，advice中的代码便自动附着其上，
这是AOP的威力所在，但有时也是麻烦所在。

AOP和OOP的关系：OOP只能沿着继承树的纵向方向重用，而AOP弥补了OOP的不足，可以再横向方向重用。
AOP是OOP的一种补充，尽管AOP不局限于OOP。

如果一个程序是一个管道系统，AOP就是在管道上钻一些孔，在每个孔中注入新的代码流。
因此AOP的关键是将advice的代码嵌入到主题程序中，术语称为编织（weaving）。
这是很自然的——将问题分解之后再合成，问题才得以还原。
编织分为两种：
静态编织，通过修改源码和字节码在编译期、后编译期和加载期嵌入代码——请注意，这里涉及刚才提到的元编程和产生式编程；
动态编织，通过代理等技术在运行期实现嵌入。
具体的工具包括一些扩展性语言如 AspectJ、AspectC++、Aspect#等和一些框架如 AspectWerkz、Spring、Jboss AOP等。

举例，白光经过三棱镜的折射分解为七色光，是谓光的色散。再经过导致的三棱镜，七色光又重新汇聚为白色。
如果把一个复杂的系统比作复合色的白光，经过第一个三棱镜——关注分离器，系统被分解为不同的切面，
如果不同的单色的采光。这些切面经过第二个三棱镜——编织器，再度合成为原系统。

AOP实施分解切面、实现切面、合成切面，第一步在设计者的头脑中进行，第三补是通过AOP的工具实现的，第二步需要程序员编码实现，即分别实现各个切面的advice。
另外程序员需要只买那个advice挂靠的切入点。

与OOP一样，AOP在带来便利的同时，也增加了一定的复杂度和性能损耗。
它适用于大中型程序，用在小型程序中则不啻牛刀杀鸡。

对于程序员来说，英语也是一门计算机语言，而且是必修的语言。