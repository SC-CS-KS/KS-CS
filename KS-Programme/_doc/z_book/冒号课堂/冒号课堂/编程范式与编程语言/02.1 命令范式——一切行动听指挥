2.1 命令范式 imperative programming ——一切行动听指挥
（命令式编程 imperative programming）其在世界观是：程序是由若干行动指令组成的有序列表。其方法论是：用变量来存储数据，用语句来执行指令。
命令式编程的程序由命令序列组成，即一系列祈使句：‘先做这，再做那。’，强调‘怎么做’。更学术点说，是冯诺依曼机运行机制的抽象，即依序从内存中获取指令和数据，然后去执行。

过程式编程（procedural programming）是指引入了过程、函数、子程序的命令式编程。
由于现在命令式语言均具备这些特征，故二者往往不加区分。

结构化编程（structured programming）是在过程式编程的基础上发展起来的。其本质是一种编程原则，提倡代码的逻辑应具有清晰的逻辑结构，以保证程序易于读写、测试、维护和优化。
结构化编程即使在三种基本结构（顺序、选择、循环）的基础上进行嵌套组合。

结构化编程的思想包含两方面：
在微观上，主张循规守矩，采用顺序、选择和循环3中逻辑结构，摒弃和限制goto语句，以避免杂乱无章的代码。
在宏观上，主张分而治之（divide and conquer），采用‘自顶向下（top-down）’的设计，通过模块化将一个较为复杂的系统分解为若干相对简单的子系统，每个子系统可以独立的进一步分解，知道容易编码实现为止。
这两方面是互为因果、互为保障的——由基本结构拼装而成的系统一定是模块清晰、层次分明的；反之，系统逐步分解到最后，一定会演化成基本结构。
