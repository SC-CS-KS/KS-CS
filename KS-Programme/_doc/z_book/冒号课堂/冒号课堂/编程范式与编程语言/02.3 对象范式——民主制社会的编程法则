2.3 对象范式（object-oriented programming）——民主制社会的编程法则
OOP是在命令式的基础上发展起来的，其核心思想可泛化为：以数据为中心组织逻辑，将系统视为相互作用的对象集合，并利用继承和多态来增强可维护性、可扩展性和可重用性。
这种思想也能应用到函数式和逻辑式中，只不过对象的方法从命令式中的过程分别换成函数式中的函数和逻辑式中的断言罢了。
大致上说，命令式、函数式和逻辑式互相平行，而OOp与它们正交。

软件行业的行话“No silver bullet”。
OOP适用于大型复杂的、交互式的、尤其是与现实世界密切相关的系统，但在小型应用、数学计算、符号处理等方面并无优势。
语言和范式的流行，与大公司支持和商业推动是有密切关系的。

过程式编程的理念是以过程为中心的，自上而下、逐步求精。
OOP则正好相反，以数据为中心，自底而上、逐步合并。
如果把整个流程看做一个倒长的大树，过程式编程自树根向下，逐渐分支，直到每片树叶，类似数学证明中的分析法，即执果索因的逆推法；
OOP则从每片树叶开始，逐渐合并，树根，类似数学证明中的综合法，即执因索果的正推法。

倘若把树根看成主函数，离树根越近，离用户需求也越近。
如果用过程式编程，由于是逆推法，树干改变容易导致树枝相应改变，因此一旦用户需求发生变化，可能会从树根波及到树枝和树叶，维护起来极为不易。
相反OOP从树叶开始设计，离用户需求很远，抽象程度较高，受波及的程度较小，因此更易维护和重用。

数学中的分析法和综合法往往是结合起来使用的，过程式编程和OOP也是如此，是不过各有偏重罢了。
软件设计最重要的不是变成语言，甚至也不是编程范式，而是抽象思维。

OOP 人性化表现：
对象是现实中具体事物和抽象概念的模拟，使OOP更接近人类的认知模式。
接口简洁易记。说白了，OOP就是将相关的函数用数据粘合，重新包装后再贴上对象的标签。从这个角度看，与其说OOP更具重用性，不如说更具易用性。

过程式编程的模块以函数为单位，OOP的模块以对象为单位。
区别在于：
函数是被动的实体，对象是主动的实体。
过程式程序的世界是君主制的，主函数是国王，其他函数是臣民，等级分明，所有臣民在听命于上级的同时也向下级发号施令，最终为国王服务。
OOP程序的世界是民主制的，所有对象都是独立而平等的公民，有权保护自己的财产和隐私并向他们寻求服务，同时有义务为他人提供承诺的服务，公民之间通过信息交流来协作完成任务。更进一步地，封装使得公民拥有个体身份，须要对自己负责；继承使得公民拥有家庭身份，须对家庭负责；多态使得公民拥有社会身份，需对社会负责。
