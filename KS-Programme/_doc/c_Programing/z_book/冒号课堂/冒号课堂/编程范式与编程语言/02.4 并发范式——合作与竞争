2.4 并发范式（concurrent programming）——合作与竞争
并发式编程以进程为导向（Process-Oriented）、以任务为中心将系统模块化。
并发式编程以资源共享和竞争为主线。这意味着程序设计将围绕进程的划分和调度、进程之间的通信和同步等来展开，合理的并发式设计需要诸多方便的权衡考量：
软件易于重用、维护、测试；
公平有效地利用资源，优化程序性能，如增大吞吐量、减少响应时间、提高效率等；
保障进程安全、防止竟态条件（Race Condition）;
保持进程活性，便面死锁、饥饿、活锁、资源枯竭等；
减少锁开销、上下文切换等带来的性能损耗；
妥善处理多进程在算法、调试等方面带来的复杂性。

声明式语言具有无副作用的特性，尤其适合并发式编程。

目前，究竟是在语言级别上支持并发，还是交由操作系统处理的问题上，仁者见仁，智者见智。
Java和C#等选择前者，在语法上对并发编程有一定的支持。C和C++等则选择后者，除了关键字volatile外，主要靠库函数支持。专门为并发式而设计的语言大多仅限于学术研究而非商业应用，Erlang语言是少数的例外。
Erlang 支持函数式和并发式，采用消息传递的并发模型。

并发式和对象式虽是相互正交的两种范式，但有相通之处：
他们均与三大核心范式正交，并且越来越广泛地向他们渗透；均为传统编程的一种推广——
并发式进程个数为1时，即为传统的串行式编程，对象的方法个数为0即为传统的数据类型；
均将整个程序系统分解为若干独立的子系统，不同的是一个以任务为单位，一个以对象为单位；
子系统之间均能交流和合作，不同的是一个以竞争为主题，一个以服务为主题。

如果将程序系统视为公司，那么并发式系统是产品型公司，每个进程是一名员工，其职责是执行单一任务；
对象式系统是服务型公司，每个对象时一名服务员，其职责是提供系列服务。
由此可见，一名优秀的程序设计师也应该是一名优秀的管理者。

